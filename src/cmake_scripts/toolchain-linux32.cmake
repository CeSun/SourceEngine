#
# Toolchain file for i386 targets
#
set(CMAKE_CROSSCOMPILING ON)

set(CMAKE_SYSTEM_NAME "Linux")
set(CMAKE_SYSTEM_PROCESSOR "i386")
set(CMAKE_EXECUTALE_FORMAT "ELF")

# Using GNU assembler for now
set(CMAKE_ASM_COMPILER	"as")
set(CMAKE_C_COMPILER 	"gcc")
set(CMAKE_CXX_COMPILER 	"g++")
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_ASM_FLAGS 			"${CMAKE_ASM_FLAGS} -m32")
set(CMAKE_C_FLAGS				"${CMAKE_C_FLAGS} -D_x86_ -D_i386_ -m32 -std=c99" CACHE STRING "C Flags")
set(CMAKE_CXX_FLAGS				"${CMAKE_CXX_FLAGS} -D_x86_ -D_i386_ -m32 -std=c++17" CACHE STRING "C++ Flags")
set(CMAKE_EXE_LINKER_FLAGS 		"${CMAKE_EXE_LINKER_FLAGS} -m32" CACHE INTERNAL "EXE Linker Flags")
set(CMAKE_SHARED_LINKER_FLAGS 	"${CMAKE_SHARED_LINKER_FLAGS} -m32" CACHE INTERNAL "Shared Linker Flags")
set(CMAKE_MODULE_LINKER_FLAGS 	"${CMAKE_MODULE_LINKER_FLAGS} -m32" CACHE INTERNAL "Module Linker Flags")

if(DEFINED LINKER_SCRIPT)
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -T ${LINKER_SCRIPT}" CACHE INTERNAL "EXE Linker Flags")
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -T ${LINKER_SCRIPT}" CACHE INTERNAL "Shared Linker Flags")
	set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -T ${LINKER_SCRIPT}" CACHE INTERNAL "Module Linker Flags")
endif(DEFINED LINKER_SCRIPT)
